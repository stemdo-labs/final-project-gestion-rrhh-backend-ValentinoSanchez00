pipeline {
    agent {
        kubernetes {
            label 'charts-builder'
            defaultContainer 'tools'
            yaml """
                apiVersion: v1
                kind: Pod
                spec:
                containers:
                    - name: tools
                    image: ubuntu:22.04
                    command:
                        - cat
                    tty: true
                    securityContext:
                        privileged: true
                    volumeMounts:
                        - mountPath: "/usr/local/bin"
                        name: bin-volume
                        - mountPath: "/home/jenkins/agent"
                        name: workspace-volume
                        - mountPath: "/var/lib/docker"
                        name: docker-volume
                volumes:
                    - name: bin-volume
                    emptyDir: {}
                    - name: workspace-volume
                    emptyDir: {}
                    - name: docker-volume
                    emptyDir: {}
                """

        }
    }  
    environment {
        APIKEY = credentials('IBM_CLOUD_API_KEY_VSANCHEZ') 
        MICROSERVICE = 'backend'
    }
    parameters {
        string(name: 'ENVIRONMENT', defaultValue: 'develop', description: 'Ambiente de despliegue (develop/production)')
    }
    stages {
        stage('Mostrar Configuraci贸n') {
            steps {
                echo "Configuraci贸n elegida:"
                echo "Microservicio: ${params.MICROSERVICE}"
                echo "Ambiente: ${params.ENVIRONMENT}"
            }
        }
        stage('Test Frontend') {
            when {
                allOf {
                    expression { params.MICROSERVICE == 'frontend' }
                    expression { params.ENVIRONMENT == 'production' }
                }
            }
            steps {
                echo "Configurando y ejecutando linte"
                sh """
                npm install eslint --save-dev
                npx eslint --init
                npx eslint . --ext .js,.jsx,.ts,.tsx
                """
            }
        }
        stage('Configurar default.conf') {
            when {
                expression { params.MICROSERVICE == 'frontend' }
            }
            steps {
                script {
                    def confPath = "default.conf"
                    def backendUrl = params.ENVIRONMENT == 'develop' 
                        ? "http://backend-develop-svc:8080" 
                        : "http://backend-production-svc:8080"
                    def location = params.ENVIRONMENT == 'develop' 
                        ? "/dev-vsanchez" 
                        : "/prod-vsanchez"
                    sh """
                    sed -i "s|proxy_pass http://svc-backend:8080;|proxy_pass ${backendUrl};|g" ${confPath}
                    sed -i "s|location /pepe-vsanchez |location ${location} |g" ${confPath}
                    """
                    sh "cat ${confPath}"
                }
            }
        }
        stage('Instalar Docker') {
            steps {
                script {
                    sh '''
                    apt-get update && \
                    apt-get install -y curl bash git docker.io
                    '''
                }
            }
        }
        stage('Instalar Herramientas') {
            steps {
                sh """
                curl -sL https://aka.ms/InstallAzureCLIDeb | bash
                curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
                ibmcloud plugin install container-registry -r 'IBM Cloud'
                ibmcloud plugin install container-service -r 'IBM Cloud'
                apt-get install -y libxml2-utils
                apt update && apt upgrade -y
                """
            }
        }
        stage('Login IBM Cloud') {
            steps {
                sh """
                ibmcloud login --apikey ${APIKEY} -r eu-gb
                ibmcloud target -g Stemdo_Sandbox
                ibmcloud cr login
                ibmcloud cr namespace-add cr-vsanchez
                """
            }
        }
        stage('Login Docker') {
            steps {
                sh """
                which dockerd


                

                """
            }
        }
        stage('Extraer Versi贸n') {
            steps {
                script {
                    if (params.MICROSERVICE == 'frontend') {
                        env.VERSION = sh(
                            script: "node -pe 'require(\"./package.json\").version'",
                            returnStdout: true
                        ).trim()
                    } else if (params.MICROSERVICE == 'backend') {
                        env.VERSION = sh(
                            script: "xmllint --xpath \"string(//version)\" pom.xml",
                            returnStdout: true
                        ).trim()
                    }
                    echo "Versi贸n detectada: ${env.VERSION}"
                }
            }
        }
        stage('Construir Imagen') {
            steps {
                sh "docker build -t imagen-proyecto-${params.MICROSERVICE}-${params.ENVIRONMENT} ."
            }
        }
        stage('Taggear Imagen') {
            steps {
                sh """
                docker tag imagen-proyecto-${params.MICROSERVICE}-${params.ENVIRONMENT} uk.icr.io/cr-vsanchez/imagen-proyecto-${params.MICROSERVICE}-${params.ENVIRONMENT}:${env.VERSION}
                """
            }
        }
        stage('Pushear Imagen') {
            steps {
                sh """
                docker push uk.icr.io/cr-vsanchez/imagen-proyecto-${params.MICROSERVICE}-${params.ENVIRONMENT}:${env.VERSION}
                """
            }
        }
    }
}
